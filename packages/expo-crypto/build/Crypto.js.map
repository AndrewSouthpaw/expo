{"version":3,"file":"Crypto.js","sourceRoot":"","sources":["../src/Crypto.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAClD,OAAO,UAAU,MAAM,cAAc,CAAC;AAEtC,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAiB,MAAM,gBAAgB,CAAC;AACpE,cAAc,gBAAgB,CAAC;AAE/B,SAAS,eAAe,CAAC,SAAoB;IAC3C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;QACjD,MAAM,IAAI,SAAS,CACjB,uEAAuE,MAAM,CAAC,IAAI,CAChF,SAAS,CACV,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CACzB,CAAC;KACH;AACH,CAAC;AAED,SAAS,UAAU,CAAC,IAAY;IAC9B,IAAI,IAAI,IAAI,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;QAC5D,MAAM,IAAI,SAAS,CAAC,8DAA8D,CAAC,CAAC;KACrF;AACH,CAAC;AAED,SAAS,cAAc,CAAC,QAAkB;IACxC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC/C,MAAM,IAAI,SAAS,CACjB,qEAAqE,MAAM,CAAC,IAAI,CAC9E,QAAQ,CACT,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CACxB,CAAC;KACH;AACH,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,SAAoB,EACpB,IAAY,EACZ,UAAyB,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE;IAEnD,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,aAAa,EAAE,mBAAmB,CAAC,CAAC;KACnE;IAED,eAAe,CAAC,SAAS,CAAC,CAAC;IAC3B,UAAU,CAAC,IAAI,CAAC,CAAC;IACjB,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAEjC,OAAO,MAAM,UAAU,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACtE,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-errors';\nimport ExpoCrypto from './ExpoCrypto';\n\nimport { Algorithm, Encoding, DigestOptions } from './Crypto.types';\nexport * from './Crypto.types';\n\nfunction assertAlgorithm(algorithm: Algorithm): void {\n  if (!Object.values(Algorithm).includes(algorithm)) {\n    throw new TypeError(\n      `expo-crypto: Invalid algorithm provided. Expected one of: Algorithm.${Object.keys(\n        Algorithm\n      ).join(', Algorithm.')}`\n    );\n  }\n}\n\nfunction assertData(data: string): void {\n  if (data == null || typeof data !== 'string' || !data.length) {\n    throw new TypeError(`expo-crypto: Invalid data provided. Expected a valid string.`);\n  }\n}\n\nfunction assertEncoding(encoding: Encoding): void {\n  if (!Object.values(Encoding).includes(encoding)) {\n    throw new TypeError(\n      `expo-crypto: Invalid encoding provided. Expected one of: Encoding.${Object.keys(\n        Encoding\n      ).join(', Encoding.')}`\n    );\n  }\n}\n\nexport async function digestStringAsync(\n  algorithm: Algorithm,\n  data: string,\n  options: DigestOptions = { encoding: Encoding.hex }\n): Promise<string> {\n  if (!ExpoCrypto.digestStringAsync) {\n    throw new UnavailabilityError('expo-crypto', 'digestStringAsync');\n  }\n\n  assertAlgorithm(algorithm);\n  assertData(data);\n  assertEncoding(options.encoding);\n\n  return await ExpoCrypto.digestStringAsync(algorithm, data, options);\n}\n"]}